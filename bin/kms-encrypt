#!/usr/bin/env bash

msg() {
  printf '%s\n' "$*" >&2
}

err() {
  [ -z "$no_color" ] && tput setaf 1
  msg "$@"
  [ -z "$no_color" ] && tput sgr0
}

error_exit() {
  err "$@"
  exit 1
}

usage_error() {
  [ "$#" -gt 0 ] && err "$@" $'\n'
  usage
  exit 1
}

getopt_error() {
  usage_error "$(echo "$1" | sed -n 's/.*: //1p')"
}

verbose() {
  [ -n "$verbose" ] && msg "$@"
}

color() {
  [ -z "$no_color" ] && tput setaf "$1"
  echo -n "${@:2}"
  [ -z "$no_color" ] && tput sgr0
}

usage() {
  summary
  msg && arguments
  [ -n "$1" ] && msg && examples
}

summary() {
  cat >&2 <<EOF
Usage: $(color 2 "$(basename "$0")") [OPTIONS] KMS_KEY_ALIAS
Encrypt a value with KMS
EOF
}

arguments() {
  cat >&2 <<EOF
$(color 3 CIPHERTEXT)
The KMS-encrypted ciphertext to decrypt. If not given, the ciphertext will be
taken from STDIN.

$(color 3 KMS_KEY_ALIAS)
The alias for the KMS key to encrypt with

$(color 3 STDIN)
If STDIN is a tty, it will prompt for plaintext input. Otherwise, the plaintext
will be taken from STDIN. This can be used to pipe plaintext into kms-encrypt.

$(color 3 OPTIONS)
$(color 2 "-B|--no-base64")       Value is not base64 encoded
$(color 2 "-h|--help")            Show this help message
$(color 2 "-N|--no-color")        Don't output any ANSI colors
$(color 2 "-p|--profile")         An AWS CLI configuration profile
$(color 2 "-r|--region")          An AWS region
$(color 2 "-v|--verbose")         Print verbose messaging
EOF
}

examples() {
  cat >&2 <<EOF
$(color 3 EXAMPLES)
$ kms-encrypt app-production
plaintext: <enter value>

$ kms-encrypt app-production < key.pem
EOF
}

shortopts='BhNp:r:v'
longopts='no-base64,help,no-color,profile:,region:,verbose'

if ! getopt -T > /dev/null; then
  options="$(getopt \
    --options "$shortopts" \
    --long "$longopts" \
    -n "$(basename "$0")" \
    -- "$@" \
  2>&1)" || getopt_error "$options"
else
  options="$(getopt \
    "$shortopts" \
    "$@" \
  2>&1)" || getopt_error "$options"
fi

eval set -- "$options"

while true; do
  case "$1" in
    -B|--no-base64) no_base64=1; shift ;;
    -h|--help) help=1; shift ;;
    -N|--no-color) no_color=1; shift ;;
    -p|--profile) profile="$2"; shift 2 ;;
    -r|--region) region="$2"; shift 2 ;;
    -v|--verbose) verbose=1; shift ;;
    --) shift; break ;;
  esac
done

[ -n "$help" ] && usage 1 2>&1 | LESS="$LESS -F" "$PAGER" && exit

if [ $# -ne 1 ]; then
  usage_error 'Expected a single KMS_KEY_ALIAS argument'
fi

if ! command -v aws >/dev/null 2>&1; then
  error_exit 'The aws CLI is required'
fi

if [ -n "$no_base64" ] && ! command -v base64 >/dev/null 2>&1; then
  usage_error 'The base64 command is required for the -B option'
fi

alias="$1"
[ -n "$profile" ] && common_args+=(--profile "$profile")
[ -n "$region" ] && common_args+=(--region "$region")

key_id="$( \
  aws kms describe-key \
  "${common_args[@]}" \
  --key-id "alias/${alias}" \
  --output text \
  --query KeyMetadata.KeyId
)"

verbose "Profile: ${profile:-(default)}"
verbose "Region: ${region:-(default)}"
verbose "Key ID: ${key_id}"

[ -n "$key_id" ] || error_exit "No KMS alias ${alias}"

if [ -t 0 ]; then
  verbose 'Reading one line from TTY'
  read -rsp 'Plaintext: ' plaintext
  get_plaintext=(printf '%s' "$plaintext")
  msg
else
  verbose 'Reading from STDIN'
  get_plaintext=(cat)
fi

ciphertext="$( \
  aws kms encrypt \
  "${common_args[@]}" \
  --key-id "$key_id" \
  --plaintext fileb://<("${get_plaintext[@]}") \
  --output text \
  --query CiphertextBlob
)"

if [ -n "$no_base64" ]; then
  echo "$ciphertext" | base64 --decode
else
  echo "$ciphertext"
fi
