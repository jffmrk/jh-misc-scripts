#!/usr/bin/env bash

msg() {
  printf '%s\n' "$*" >&2
}

err() {
  [ -z "$no_color" ] && tput setaf 1
  msg "$@"
  [ -z "$no_color" ] && tput sgr0
}

error_exit() {
  err "$@"
  exit 1
}

usage_error() {
  [ "$#" -gt 0 ] && err "$@" $'\n'
  usage
  exit 1
}

getopt_error() {
  usage_error "$(echo "$1" | sed -n 's/.*: //1p')"
}

verbose() {
  [ -n "$verbose" ] && msg "$@"
}

color() {
  [ -z "$no_color" ] && tput setaf "$1"
  echo -n "${@:2}"
  [ -z "$no_color" ] && tput sgr0
}

usage() {
  summary
  msg && arguments
  [ -n "$1" ] && msg && examples
}

summary() {
  cat >&2 <<EOF
Usage: $(color 2 "$(basename "$0")") [OPTIONS] [CIPHERTEXT]
Decrypt a value with KMS
EOF
}

arguments() {
  cat >&2 <<EOF
$(color 3 CIPHERTEXT)
The KMS-encrypted ciphertext to decrypt. If not given, the ciphertext will be
taken from STDIN.

$(color 3 OPTIONS)
$(color 2 "-B|--no-base64")       Value is not base64 encoded
$(color 2 "-f|--force-output")    Force outputting plaintext to STDOUT
$(color 2 "-h|--help")            Show this help message
$(color 2 "-N|--no-color")        Don't output any ANSI colors
$(color 2 "-p|--profile")         An AWS CLI configuration profile
$(color 2 "-r|--region")          An AWS region
$(color 2 "-v|--verbose")         Print verbose messaging
EOF
}

examples() {
  cat >&2 <<EOF
$(color 3 EXAMPLES)
$ kms-decrypt AEjbjesdo=
Thesecret

$ kms-decrypt < key.pem
Thesecretfromfile
EOF
}

shortopts='BfhNp:r:v'
longopts='no-base64,force-output,help,no-color,profile:,region:,verbose'

if ! getopt -T > /dev/null; then
  options="$(getopt \
    --options "$shortopts" \
    --long "$longopts" \
    -n "$(basename "$0")" \
    -- "$@" \
  2>&1)" || getopt_error "$options"
else
  options="$(getopt \
    "$shortopts" \
    "$@" \
  2>&1)" || getopt_error "$options"
fi

eval set -- "$options"

while true; do
  case "$1" in
    -B|--no-base64) not_base64=1; shift ;;
    -f|--force-output) force_stdout=1; shift ;;
    -h|--help) help=1; shift ;;
    -N|--no-color) no_color=1; shift ;;
    -p|--profile) profile="$2"; shift 2 ;;
    -r|--region) region="$2"; shift 2 ;;
    -v|--verbose) verbose=1; shift ;;
    --) shift; break ;;
  esac
done

[ -n "$help" ] && usage 1 2>&1 | LESS="$LESS -F" "$PAGER" && exit

if [ $# -eq 0 ] && [ -t 0 ]; then
  usage_error 'No ciphertext given'
fi

if [ $# -gt 1 ]; then
  usage_error 'Expected a single CIPHERTEXT argument'
fi

if ! command -v aws >/dev/null 2>&1; then
  error_exit 'The aws CLI is required'
fi

if [ -z "$not_base64" ] && ! command -v base64 >/dev/null 2>&1; then
  usage_error 'The base64 command is required without the -B option'
fi

if [ -t 1 ] && [ -z "$force_stdout" ]; then
  usage_error 'Refusing to output plaintext to STDOUT. Pipe to a file or use -f'
fi

ciphertext="$1"
[ -n "$profile" ] && common_args+=(--profile "$profile")
[ -n "$region" ] && common_args+=(--region "$region")

verbose "Profile: ${profile:-(default)}"
verbose "Region: ${region:-(default)}"

if [ -n "$ciphertext" ]; then
  get_ciphertext=(printf '%s' "$ciphertext")
else
  get_ciphertext=(cat)
fi

if [ -n "$not_base64" ]; then
  decode=(cat)
else
  decode=(base64 --decode)
fi

aws kms decrypt \
  "${common_args[@]}" \
  --ciphertext-blob fileb://<("${get_ciphertext[@]}" | "${decode[@]}") \
  --output text \
  --query Plaintext \
  | base64 --decode
